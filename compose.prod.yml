services:
  backend:
    env_file:
      - .env
    build:
      context: ./back
      dockerfile: Dockerfile.prod

    environment:
      UVICORN_HOST: ${UVICORN_HOST}
      UVICORN_PORT: ${UVICORN_PORT}
      UVICORN_LOG_LEVEL: ${UVICORN_LOG_LEVEL}
      DEBUG: ${DEBUG}
    command: uvicorn app.main:app --host 0.0.0.0
    restart: always
    networks:
      - internal-network
    depends_on:
      - redis
      - postgres_ai_echoes

  storyteller:
    build:
      context: ./back
      dockerfile: docker/Dockerfile.storyteller
    ports:
      - "5001:8001"
    restart: unless-stopped
    env_file:
      - .env
    networks:
      - internal-network
    depends_on:
      - redis
      - postgres_ai_echoes

  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile.prod
      args:
        VITE_BACKEND_URL: /api/
    volumes:
      - /code/node_modules
      - ./front/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    image: aiechoes_frontend:1.0
    restart: always
    environment:
      - VITE_BACKEND_URL=/api
    networks:
      - internal-network

  postgres_ai_echoes:
    env_file:
      - .env
    image: postgres
    environment:
      POSTGRES_DB: aiechoes_dev
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - ./postgres:/docker-entrypoint-initdb.d
      - ./postgres-data:/var/lib/postgresql/data
    networks:
      - internal-network

  redis:
    env_file:
      - .env
    image: redis/redis-stack-server:latest
    restart: always
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: >
      sh -c 'redis-server --requirepass "$REDIS_PASSWORD" --loadmodule /opt/redis-stack/lib/redisearch.so --loadmodule /opt/redis-stack/lib/rejson.so'
    networks:
      - internal-network

  minio:
    env_file:
      - .env
    restart: always
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000" # MinIO API Port
      - "9001:9001" # MinIO Console Port
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    networks:
      - internal-network

  nginx:
    image: nginx:latest
    ports:
      - "80:80" # HTTP
      - "443:443" #  SSL
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro #Nginx config file
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - internal-network
    depends_on:
      - frontend
      - minio
      - backend

volumes:
  minio_data:

networks:
  internal-network:
    driver: bridge
# docker-compose -f compose.dev.yml up -d

